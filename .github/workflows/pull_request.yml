name: Python application

on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches: ["develop"]

jobs:
  build:
    runs-on: ayon-win
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      # - name: Set up Python
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: 3.9.11

      # - name: Install dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     If (Test-Path "requirements.txt") { pip install -r requirements.txt }

      # - name: Run pylint on openpype and server_addon folders
      #   run: |
      #     pylint --rcfile=.pylintrc --output-format=parseable --exit-zero openpype server_addon

      - name: Build
        run: |
          rootPath=$(pwd)
          serverAddonsPath="$rootPath/server_addon"
          buildFolderPath="$rootPath/build"

          if [ ! -d "$buildFolderPath" ]; then
              mkdir -p "$buildFolderPath"
          fi

          # Loop through each addon directory
          for addonItem in "$serverAddonsPath"/*; do
              if [ -d "$addonItem" ]; then
                  versionFilePath="$addonItem/server/version.py"

                  if [ -f "$versionFilePath" ]; then
                      versionFileContent=$(cat "$versionFilePath")
                      versionPattern1='__version__ = "(?<version>[0-9]+\.[0-9]+\.[0-9]+)"'
                      versionPattern2='__version__ = "(?<version>[0-9]+\.[0-9]+\.[0-9]+-[a-zA-Z]+\.[0-9]+)"'

                      # Extract the version using regex
                      if [[ $versionFileContent =~ $versionPattern1 ]]; then
                          version="${BASH_REMATCH[1]}"
                      elif [[ $versionFileContent =~ $versionPattern2 ]]; then
                          version="${BASH_REMATCH[1]}"
                      else
                          version="Version not found"
                      fi

                      addonBuildFolderPath="$buildFolderPath/$addonItem/$(basename "$addonItem")/$version"

                      # Create the addon build folder if it doesn't exist
                      if [ ! -d "$addonBuildFolderPath" ]; then
                          mkdir -p "$addonBuildFolderPath"
                      fi

                      # Copy the contents of the addon item to the addon build folder
                      cp -r "$addonItem/server/"* "$addonBuildFolderPath/"
                  fi
              fi
          done
      # - name: Upload to S3
      #   run: |
      #     $current_dir = Get-Location
      #     $awsCliPath = "C:\Program Files\Amazon\AWSCLIV2\aws.exe"
      #     $sourcePath = "$current_dir/build"
      #     $destinationPath = "${{ vars.S3_BUCKET }}/${{ vars.BUILDS }}/server-addons"
      #     & $awsCliPath s3 sync $sourcePath $destinationPath
      #     echo "$sourcePath --> $destinationPath"

      - name: Upload to S3
        run: |
          rootPath=$(pwd)
          sourcePath=="$rootPath/build"
          destinationPath="${{ vars.S3_BUCKET }}/${{ vars.BUILDS }}/server-addons"
          aws s3 sync $sourcePath $destinationPath   
          echo "$sourcePath --> $destinationPath"
          