name: Python application

on:
  pull_request:
    types: [opened, reopened, synchronize]
    #branches: [main]

jobs:
  build:
    runs-on: ayon-win
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      # - name: Set up Python
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: 3.9.11

      # - name: Install dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     If (Test-Path "requirements.txt") { pip install -r requirements.txt }

      # - name: Run pylint on openpype and server_addon folders
      #   run: |
      #     pylint --rcfile=.pylintrc --output-format=parseable --exit-zero openpype server_addon

      - name: Build
        run: |
          $rootPath = Get-Location
          $serverAddonsPath = "$rootPath\server_addon"
          $buildFolderPath = Join-Path -Path $rootPath -ChildPath "build"
          # Create the build folder if it doesn't exist
          if (-not (Test-Path -Path $buildFolderPath -PathType Container)) {
            New-Item -Path $buildFolderPath -ItemType Directory | Out-Null
          }
          $addonItems = Get-ChildItem -Path $serverAddonsPath
          foreach ($addonItem in $addonItems) {
            if ($addonItem.PSIsContainer) {
              $versionFilePath = Join-Path -Path $addonItem.FullName -ChildPath "server/version.py"
              if (Test-Path -Path $versionFilePath -PathType Leaf) {
                $versionFileContent = Get-Content -Path $versionFilePath
                $versionPattern1 = '__version__ = "(?<version>\d+\.\d+\.\d+)"'
                $versionPattern2 = '__version__ = "(?<version>\d+\.\d+\.\d+-\w+\.\d+)"'
                $versionMatch1 = [regex]::Match($versionFileContent, $versionPattern1)
                $versionMatch2 = [regex]::Match($versionFileContent, $versionPattern2)
                $versionMatch = [regex]::Match($versionFileContent, $versionPattern)
                if ($versionMatch1.Success) {
                  $version = $versionMatch1.Groups["version"].Value
                } elseif ($versionMatch2.Success) {
                  $version = $versionMatch2.Groups["version"].Value
                } else {
                  $version = "Version not found"
                }
                $addonBuildFolderPath = Join-Path -Path $buildFolderPath -ChildPath "$addonItem/$version"
                # Create the addon build folder if it doesn't exist
                if (-not (Test-Path -Path $addonBuildFolderPath -PathType Container)) {
                  New-Item -Path $addonBuildFolderPath -ItemType Directory | Out-Null
                }
                # Copy the contents of the addon item to the addon build folder
                Copy-Item -Path "$serverAddonsPath/$addonItem/server/*" -Destination $addonBuildFolderPath -Recurse -Force
              }
            }
          }
      - name: Upload to S3
        run: |
          $current_dir = Get-Location
          $awsCliPath = "C:\Program Files\Amazon\AWSCLIV2\aws.exe"
          $sourcePath = "$current_dir/build"
          $destinationPath = "${{ vars.S3_BUCKET }}/${{ vars.BUILDS }}/server-addons"
          & $awsCliPath s3 sync $sourcePath $destinationPath
          echo "$sourcePath --> $destinationPath"