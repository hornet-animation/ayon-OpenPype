name: Python application

on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches: ["develop"]

jobs:
  build:
    runs-on:  deploy-linux 
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Build
        run: |
          rootPath=$(pwd)
          serverAddonsPath="$rootPath/server_addon"
          buildFolderPath="$rootPath/build"

          if [ ! -d "$buildFolderPath" ]; then
              mkdir -p "$buildFolderPath"
          fi

          # Loop through each addon directory
          for addonItem in "$serverAddonsPath"/*; do
              if [ -d "$addonItem" ]; then
                  versionFilePath="$addonItem/server/version.py"

                  if [ -f "$versionFilePath" ]; then
                      versionFileContent=$(cat "$versionFilePath")
                      versionPattern1='__version__ = "(?<version>[0-9]+\.[0-9]+\.[0-9]+)"'
                      versionPattern2='__version__ = "(?<version>[0-9]+\.[0-9]+\.[0-9]+-[a-zA-Z]+\.[0-9]+)"'

                      # Extract the version using regex
                      if [[ $versionFileContent =~ $versionPattern1 ]]; then
                          version="${BASH_REMATCH[1]}"
                      elif [[ $versionFileContent =~ $versionPattern2 ]]; then
                          version="${BASH_REMATCH[1]}"
                      else
                          version="Version not found"
                      fi

                      addonBuildFolderPath="$buildFolderPath/$addonItem/$(basename "$addonItem")/$version"

                      # Create the addon build folder if it doesn't exist
                      if [ ! -d "$addonBuildFolderPath" ]; then
                          mkdir -p "$addonBuildFolderPath"
                      fi

                      # Copy the contents of the addon item to the addon build folder
                      cp -r "$addonItem/server/"* "$addonBuildFolderPath/"
                  fi
              fi
          done
      - name: Upload to S3
        run: |
          rootPath=$(pwd)
          sourcePath=="$rootPath/build"
          destinationPath="${{ vars.S3_BUCKET }}/${{ vars.BUILDS }}/server-addons"
          aws s3 sync $sourcePath $destinationPath   
          echo "$sourcePath --> $destinationPath"
          
  depoly:
    runs-on: deploy-linux
    needs: build
    steps:
    - name: Download from S3
      run: |
        linuxBuildVersion="${{ vars.BUILD_VERSION }}.${{ github.run_number }}"          
        sourcePath="${{ vars.S3_BUCKET }}/${{ vars.BUILDS }}/server-addons"       
        destinationPath="${{ vars.S3_BUCKET }}/${{ vars.BUILDS }}/server-addons"
        rm -rf   $devPath
        mkdir -p $devPath

        aws s3 cp $sourcePath $destinationPath --recursive           
        cp -al --no-preserve=mode $destinationPath/*  $devPath             